(define (m n)
    (define (unusual-root? number-to-test n)
        (and (not (= number-to-test 1))
             (not (= number-to-test (- n 1)))
             (= (remainder (square number-to-test) n) 1)))

    (define (expmod base exp m)
        (cond ((= exp 0) 1)
              ((even? exp)
               (remainder (square (expmod base (/ exp 2) m)) m))
              (else
               (remainder (* base (expmod base (- exp 1) m)) m))))

    (define (try-it a)
        (= (expmod a n n) 0))

    (define (miller-prime-test n)
        (try-it (+ 1 (random (- n 1)))))

    (define (prime? n times)
        (cond ((= times 0) true)
              ((miller-prime-test n) (prime? n (- times 1)))
              (else false)))

    (display " ")
    (display (miller-prime-test 4))
    (display " ")
    (display (miller-prime-test 4))
    (display " ")
    (display (miller-prime-test 4))
    (display " ")
    (display (miller-prime-test 4))
    (display " ")
    (display (miller-prime-test 4))
    (display " | ")
    (display (miller-prime-test 5))
    (display " ")
    (display (miller-prime-test 5))
    (display " ")
    (display (miller-prime-test 5))
    (display " ")
    (display (miller-prime-test 5))
    (display " ")
    (display (miller-prime-test 5))

    (prime? n 10))
