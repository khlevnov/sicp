(define (make-point x y) (cons x y))
(define (x-point point) (car point))
(define (y-point point) (cdr point))
(define (raw-print-point point)
    (display "(")
    (display (x-point point))
    (display ", ")
    (display (y-point point))
    (display ")"))
(define (print-point point)
    (newline)
    (raw-print-point point))

(define (make-segment start end) (cons start end))
(define (start-segment segment) (car segment))
(define (end-segment segment) (cdr segment))

(define (x-start s) (x-point (start-segment s)))
(define (y-start s) (y-point (start-segment s)))
(define (x-end s) (x-point (end-segment s)))
(define (y-end s) (y-point (end-segment s)))

(define (make-angle-rectangle s1 s2) (cons s1 s2))
(define (side1-angle-rectangle r) (car r))
(define (side2-angle-rectangle r) (cdr r))

(define (parallel-side-transfer s1 s2)
    (make-segment (make-point (x-start s2)
                              (y-start s2))
                  (make-point (- (x-end s1)
                                 (- (x-start s1)
                                    (x-start s2)))
                              (- (y-end s1)
                                 (- (y-start s1)
                                    (y-start s2))))))

(define (length s)
    (sqrt (+ (square (- (x-end s) (x-start s)))
             (square (- (y-end s) (y-start s))))))

(define (perpendicular? s1 s2)
    (let ((s1 (parallel-side-transfer s1 s2))
          (tolerance 0.0001))
         (< (abs (- (+ (square (length s1)) (square (length s2)))
                       (square (length (make-segment (end-segment s1)
                                                     (end-segment s2))))))
            tolerance)))

(define (rectangle-square s1 s2)
    (if (perpendicular? s1 s2)
        (* (length s1) (length s2))
        0))

(define (rectangle-perimeter s1 s2)
    (if (perpendicular? s1 s2)
        (+ (* 2 (length s1)) (* 2 (length s2)))
        0))

(define s1 (make-segment (make-point 6 9)
                         (make-point 2 6)))
(define s2 (make-segment (make-point 9 2)
                         (make-point 3 10)))
(rectangle-square s1 s2)
(rectangle-perimeter s1 s2)
